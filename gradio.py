# -*- coding: utf-8 -*-
"""Gradio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xjWHVtmQrMqaDzu3qxdseh62Mtr6xt5W
"""

pip install gradio

import gradio as gr
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from xgboost import XGBClassifier

# Example model accuracies (You can update these with real values)
model_accuracies = {
    "Random Forest": 0.87,
    "Gradient Boosting": 0.85,
    "Monte Carlo Simulation": 0.82,
    "XGBoost": 0.89
}

# Sample winning probabilities (these will be updated dynamically)
winning_probabilities = {
    "Australia": 15,
    "India": 20,
    "South Africa": 12,
    "England": 18,
    "Pakistan": 10,
    "New Zealand": 8,
    "West Indies": 9,
    "Sri Lanka": 8
}

# Function to predict and display results
def predict_winner(selected_model):
    # Simulating Monte Carlo (Modify this with actual model logic)
    simulations = 10000
    teams = list(winning_probabilities.keys())
    probs = np.array(list(winning_probabilities.values())) / 100

    results = np.random.choice(teams, size=simulations, p=probs)
    result_counts = pd.Series(results).value_counts(normalize=True) * 100
    result_df = pd.DataFrame({"Team": result_counts.index, "Winning Probability (%)": result_counts.values})

    # Get Top 3 teams
    top_teams = result_df.nlargest(3, "Winning Probability (%)")
    top_teams_display = f"üèÜ **Top 3 Most Likely Winners:**\n1Ô∏è‚É£ {top_teams.iloc[0, 0]} - {top_teams.iloc[0, 1]:.2f}%\n2Ô∏è‚É£ {top_teams.iloc[1, 0]} - {top_teams.iloc[1, 1]:.2f}%\n3Ô∏è‚É£ {top_teams.iloc[2, 0]} - {top_teams.iloc[2, 1]:.2f}%"

    # Get selected model's accuracy
    accuracy = model_accuracies.get(selected_model, "N/A")

    return top_teams_display, f"üîç Selected Model: {selected_model}\nüéØ Accuracy: {accuracy * 100:.2f}%"

# Gradio UI
iface = gr.Interface(
    fn=predict_winner,
    inputs=gr.Dropdown(list(model_accuracies.keys()), label="Select Model"),
    outputs=[gr.Textbox(label="üèÜ Prediction"), gr.Textbox(label="üìä Model Accuracy")],
    title="ICC Champions Trophy Predictor",
    description="Select a model and see the predicted winner along with model accuracy."
)

iface.launch()

import gradio as gr
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score

# Define teams
teams = ["India", "South Africa", "New Zealand", "Australia", "Afghanistan", "England", "Bangladesh", "Pakistan"]

# Define probabilities based on Monte Carlo simulation results
winning_probabilities = {
    "India": 24.36,
    "South Africa": 21.94,
    "New Zealand": 17.71,
    "Australia": 12.85,
    "Afghanistan": 7.81,
    "England": 6.27,
    "Bangladesh": 5.67,
    "Pakistan": 3.39
}

# Assume model accuracy (this should ideally come from the trained model)
model_accuracy = 0.87  # Example accuracy of 87%

def monte_carlo_simulation(simulations):
    results = np.random.choice(teams, size=simulations, p=np.array(list(winning_probabilities.values()))/100)
    result_counts = pd.Series(results).value_counts(normalize=True) * 100  # Convert to percentages

    # Create a DataFrame for displaying probabilities
    probability_table = pd.DataFrame({"Team": result_counts.index, "Winning Probability (%)": result_counts.values})
    probability_table = probability_table.sort_values(by="Winning Probability (%)", ascending=False)

    # Generate bar plot
    plt.figure(figsize=(8, 5))
    result_counts.sort_values(ascending=False).plot(kind='bar', color='skyblue', edgecolor='black')
    plt.title(f"Winning Probability Distribution ({simulations} Simulations)")
    plt.xlabel("Teams")
    plt.ylabel("Winning Probability (%)")
    plt.xticks(rotation=45)
    plt.grid(axis="y", linestyle="--", alpha=0.7)
    plt.tight_layout()

    # Save and return plot
    plt.savefig("monte_carlo_results.png")
    plt.close()

    # Display accuracy alongside the results
    accuracy_message = f"Model Accuracy: {model_accuracy * 100:.2f}%"

    return probability_table, "monte_carlo_results.png", accuracy_message

# Create Gradio interface
iface = gr.Interface(
    fn=monte_carlo_simulation,
    inputs=gr.Number(value=10000, label="Number of Simulations"),
    outputs=[
        gr.Dataframe(headers=["Team", "Winning Probability (%)"], label="Winning Probabilities"),
        gr.Image(type="filepath", label="Winning Probability Chart"),
        gr.Textbox(label="Model Accuracy")
    ],
    title="ICC Champions Trophy 2025 - Monte Carlo Simulation",
    description="Enter the number of simulations to predict the probability of each team winning the tournament. The model's accuracy is also displayed."
)

# Launch app
iface.launch(share=True)

